#!/usr/bin/env ruby

begin # global exception handling

require "net/http"
require "yaml"
require "json"
require "erb"

# Merge variables from .env file into environment.
env = YAML.load(File.read(File.join(__dir__, "releasenotes.env")))
env.each { |key, value| ENV[key] ||= value.to_s }

# Returns variable from environment or nil if it's nil/empty/whitespace.
def optional_env(name)
  if ENV[name].to_s.strip.empty? then nil else ENV[name] end
end

# Returns variable from environment or, if it's nil/empty/whitespace, complains that it's not set and exits.
def required_env(name)
  if ENV[name].to_s.strip.empty? then raise "#{name.match(/bamboo_(.+)/)[1].gsub("_", " ")} not set!" else ENV[name] end
end

# Import required variables.
JIRA_SERVER = required_env("bamboo_JIRA_Server")
BAMBOO_SERVER = required_env("bamboo_Bamboo_Server")
SPRINT_FIELD = required_env("bamboo_Sprint_Field")

# Import authentication information.
JIRA_USER = optional_env("bamboo_Atlassian_User") || required_env("bamboo_JIRA_User")
JIRA_PASSWORD = optional_env("bamboo_Atlassian_Password") || required_env("bamboo_JIRA_Password")
BAMBOO_USER = optional_env("bamboo_Atlassian_User") || required_env("bamboo_Bamboo_User")
BAMBOO_PASSWORD = optional_env("bamboo_Atlassian_Password") || required_env("bamboo_Bamboo_Password")

# Import and parse build result key or import build plan, stage and number.
if build_result = optional_env("bamboo_Build_Result")
  BUILD_RESULT_PATTERN = Regexp.new(optional_env("bamboo_Build_Result_Pattern") || '^(?<plan>[\w-]+)-(?<stage>\w+)-(?<number>\d+)$')
  parsed_build_result = BUILD_RESULT_PATTERN.match(build_result)
  BUILD_PLAN = parsed_build_result["plan"]
  BUILD_STAGE = parsed_build_result["stage"]
  BUILD_NUMBER = parsed_build_result["number"]
else
  BUILD_PLAN = required_env("bamboo_Build_Plan")
  BUILD_STAGE = required_env("bamboo_Build_Stage")
  BUILD_NUMBER = required_env("bamboo_Build_Number")
end

# Import optional variables.
BRANCH_NAME = optional_env("bamboo_Branch_Name")
MESSAGE = optional_env("bamboo_Release_Notes")
ISSUE_TYPE = (optional_env("bamboo_Release_Notes_Issue_Type") || "").split(/,\s?/).map(&:downcase)
ISSUE_STATUS = (optional_env("bamboo_Release_Notes_Issue_Status") || "").split(/,\s?/).map(&:downcase)
MODE = (optional_env("bamboo_Release_Notes_Mode") || "sprint").downcase
ISSUE_INFO = (optional_env("bamboo_Release_Notes_Issue_Info") || "type, status, build").split(/,\s?/).map(&:downcase)
FILE = optional_env("bamboo_Release_Notes_File") || "releasenotes.md"

# Restrictions for API calls.
MAX_BUILDS = 100
MAX_ISSUES = 100

# Delete the old release notes file.
File.delete(FILE) if File.exists?(FILE)

# Base for both Bamboo and JIRA API.
API = Struct.new(:server, :user, :password) do
  def get(query)
    uri = URI.join(server, "/rest/api/latest/", query)
    puts ">> Sending Request", uri
    request = Net::HTTP::Get.new(uri)
    request.basic_auth(user, password)
    request["Accept"] = "application/json"
    http = Net::HTTP.new(uri.hostname, uri.port)
    http.use_ssl = true if uri.is_a?(URI::HTTPS)
    start = Time.now
    response = http.request(request)
    puts "<< Received Response", "Duration: #{(Time.now - start)} s", "Status: #{response.code} #{response.message}"
    JSON.parse(response.body)
  end
end

# Set up Bamboo and JIRA APIs.
bamboo = API.new(BAMBOO_SERVER, BAMBOO_USER, BAMBOO_PASSWORD)
jira = API.new(JIRA_SERVER, JIRA_USER, JIRA_PASSWORD)

# Fetch data of both build plan and current build from Bamboo, because build plan doesn't contain current build yet.
build_plan = bamboo.get("result/#{BUILD_PLAN}?expand=results.result.jiraIssues&max-result=#{MAX_BUILDS}")
current_build = bamboo.get("result/#{BUILD_PLAN}-#{BUILD_NUMBER}?expand=jiraIssues")
all_builds = [current_build] + build_plan["results"]["result"]

# Generates URL for a specific build.
def build_url(build_number)
  URI.join(BAMBOO_SERVER, "browse/", "#{BUILD_PLAN}-#{build_number}")
end

# A JIRA issue.
class Issue

  attr_accessor :key, :url, :type, :summary, :description, :status, :sprint, :build
  attr_accessor :parent, :children, :is_child, :blocker_keys

  def initialize(data)
    @key = data["key"]
    @url = URI.join(JIRA_SERVER, "browse/", @key)
    @type = data["fields"]["issuetype"]["name"]
    @summary = data["fields"]["summary"]
    @description = data["fields"]["description"]
    @status = data["fields"]["status"]["name"]
    @build = ""
    @children = []
    @is_child = false
    @parent = data["fields"]["parent"]["key"] if data["fields"]["parent"]
    # Extract sprint name by parsing custom field.
    @sprint = if sprint = data["fields"][SPRINT_FIELD]
      sprint_data = sprint[0].match(/^.+\[(.+)\]$/)[1]
      parsed_sprint_data = Hash[sprint_data.split(",").collect { |s| s.split("=") }]
      parsed_sprint_data["name"]
    else "Other Issues" end
    # Select keys of issues with an inward blocking relationship to this one.
    @blocker_keys = data["fields"]["issuelinks"].select do |link|
      link["type"]["name"] == "Blocks" && link["inwardIssue"]
    end.collect do |link|
      link["inwardIssue"]["key"]
    end
  end

  # Recursively generates markdown for this issue and its child issues.
  def to_md(level=0)
    issue_md = ("\t" * level) + "* [#{@summary}](#{@url})"
    info = []
    info << @type if ISSUE_INFO.include? "type"
    info << @status if ISSUE_INFO.include? "status"
    info << "Build ##{@build}" if ISSUE_INFO.include? "build"
    issue_md << " (#{info.join(", ")})" unless info.empty?
    children_md = @children.collect { |child| child.to_md(level+1) }
    ([issue_md] + children_md) * "\n"
  end

end

# If issue filters are specified, construct respective query string (quoting all items).
jql_issue_type = " AND type in (#{ISSUE_TYPE.map{ |type| %Q("#{type}") }.join(",")})" unless ISSUE_TYPE.empty?
jql_issue_status = " AND status in (#{ISSUE_STATUS.map{ |type| %Q("#{type}") }.join(",")})" unless ISSUE_STATUS.empty?

# Map issue keys to build numbers to be able to assign them to the issues later.
issue_build_numbers = {}
all_builds.each do |build|
  issue_keys = build["jiraIssues"]["issue"].collect { |issue| issue["key"] }
  issue_keys.each { |issue| issue_build_numbers[issue] = build["planResultKey"]["resultNumber"] }
end

# Fetch data of all issues from JIRA at once.
issue_keys = issue_build_numbers.keys
jql_query = "key in (#{issue_keys.join(",")})#{jql_issue_type}#{jql_issue_status}"
search_result = jira.get("search?jql=#{URI.encode(jql_query)}" +
  "&fields=summary,issuetype,status,parent,issuelinks,#{SPRINT_FIELD}" +
  "&maxResults=#{MAX_ISSUES}&validateQuery=false")

# Store all issues in a hash based on their key, also assign build numbers.
jira_issues = {}
search_result["issues"].each do |issue_data|
  issue = Issue.new(issue_data)
  issue.build = issue_build_numbers[issue.key]
  jira_issues[issue.key] = issue
end

# Create relationships according to parent field and blocker keys.
# Only create relationships with issues that exist here and only within the same sprint.
jira_issues.each do |key, issue|
  # If issue has a parent issue, add this issue to its parent's children.
  if issue.parent && (parent = jira_issues[issue.parent]) && (parent.sprint == issue.sprint)
    parent.children << issue
    issue.is_child = true
  end
  # If issue has blockers, add blockers to this issues children.
  issue.blocker_keys.each do |blocker_key|
    if (blocker = jira_issues[blocker_key]) && (blocker.sprint == issue.sprint)
      issue.children << blocker
      blocker.is_child = true
    end
  end
end

# Remove child issues from top-level, then group according to display mode, in reverse alphabetical order.
display_issues = jira_issues.values.reject(&:is_child)
groups = case MODE
  when "sprint" then display_issues.group_by(&:sprint)
  when "build" then display_issues.group_by { |issue| "Build ##{issue.build}" }
end
sections = Hash[groups.sort.reverse]

# Gather remaining data to display.
project_name = current_build["projectName"]
current_build_number = (if BRANCH_NAME then "#{BRANCH_NAME}-" else "#" end) + BUILD_NUMBER
current_build_url = build_url(BUILD_NUMBER)
message = MESSAGE

# ERB template for release notes.
template = <<ERB
# <%= project_name %> ([Build <%= current_build_number %>](<%= current_build_url %>))

<%= message %>

<% sections.each_pair do |section, issues| %>

## <%= section %>

<% issues.each do |issue| %>
<%= issue.to_md %>

<% end %>
<% end %>
ERB

# Render release notes to file.
output = ERB.new(template, nil, "<>").result(binding)
File.write(FILE, output)

rescue # global exception handling
  puts $!.inspect, $@
end
